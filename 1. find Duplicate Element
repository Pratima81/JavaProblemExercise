package preparation;
import java.util.*;
/*
 * FIND DUPLICATE ELEMENT IN AN ARRAY
 * 
 * 1. using Brute force
 * 2. using hash table data structure
 * 3. using data set structure
 */
import java.util.Map.Entry;
import java.util.function.Function;
import java.util.stream.Collectors;

public class findDuplicateArray {

	public static void main(String[] args) {
		
		Integer[] arr = {2, 5, 3, 1, 8, 7, 5, 3, 1};
		
		// 1. using Brute force	
		//time complexity is O(n^2)
	
		for(int i=0;i<arr.length; i++) {
			for(int j=i+1; j<arr.length;j++) {
//				
//				if(arr[i]==arr[j]) {
//					System.out.println("Duplicates are " + arr[i]);
//				
//				}
				
				if(arr[i].equals(arr[j])) {
					System.out.println("Duplicates are " + arr[i]);
				
				}
			}			
		}
		
		System.out.println("===============================");
		
		//2. using hash table data structure
		
		Map<Integer,Integer> map = new HashMap<>();
       
		//we are going to make the array value as keys and occurrence of that number as value
		for(int i : arr) {
			//check if that key is present in hashMap
			//if the key is not present in map, then put that key in map and initialize the value occurrence by 1
			if(! map.containsKey(i)) {
				map.put(i, 1);
			}
			//if key is present, get the previous count by get(i) and then increase the occurrence value by 1 
			// map.get(i) --> return the value to which the specified key is mapped
			else {
				map.put(i,map.get(i)+1);
			}			
		}
		
		//printing the key set which is greater than 2
		
		for(int x : map.keySet()) {
			if(map.get(x)>1) {
				System.out.println(x);
			}
		}
		System.out.println("===");
		Set<Entry<Integer,Integer>> entry = map.entrySet();
		for(Entry<Integer,Integer> ent : entry) {
			if(ent.getValue()>1) {
				System.out.println(ent.getKey());
			}
		}
		
		System.out.println("===============================");
		
		 //3. using data set structure
		
		//we know that the set only contains unique value
		//add() function returns true if any value is added 
		//and returns false if duplicate is found 
		
		Set<Integer> s = new HashSet<>();
		for(int x: arr) {
			if(s.add(x) == false) {   //s = the value of the given array
				System.out.println(x);
			}
		}
		System.out.println("===========Streams Set and Filter===================="); 
		System.out.println("=========STREAM APPROACh======================"); 
		Set<Integer> dataSet = new HashSet<>();
		Set<Integer>  dupSet = Arrays.asList(arr).stream().filter(e -> !dataSet.add(e)).collect(Collectors.toSet());
		System.out.println(dupSet);
		
		System.out.println("=========STREAMS GROUPING BY======================"); 
		Set<Integer> ss =Arrays.asList(arr)   //converting the array in arraylist
				.stream()    //taking a stream
					.collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))  //getting by identity and keep counting
						.entrySet()   //generate one map
							.stream()  //again use stream
							 .filter(e->e.getValue()>1)  //put filter on e.get value
							 	.map(Map.Entry::getKey)  //get me the key
							 		.collect(Collectors.toSet());
		
		System.out.println(ss);
					
		System.out.println("=========FREQUENCY METHOD======================"); 
		
		List<Integer> list =Arrays.asList(arr);
		Set<Integer> elelist=list.stream()
					.filter(e -> Collections.frequency(list, e)>1)
						.collect(Collectors.toSet());
		System.out.println(elelist);

	}

}
